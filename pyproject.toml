[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "orca_checkout"
version = "0.1.0"
description = "Orca Checkout Agent - Core Engine MVP"
readme = "README.md"
requires-python = ">=3.11"
license = "MIT"
authors = [
    {name = "Orca Team", email = "support@orca.com"},
]
keywords = ["checkout", "agent", "payment", "recommendations", "cli"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
]

dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.5.0",
    "structlog>=23.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "python-dotenv>=1.0.0",
    "httpx>=0.25.0",
    "PyYAML>=6.0.0",
    "aiohttp>=3.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.11.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.0",
]

[project.scripts]
altwallet_agent = "altwallet_agent.cli:cli"

[project.urls]
Homepage = "https://github.com/orca/checkout-agent"
Repository = "https://github.com/orca/checkout-agent"
Issues = "https://github.com/orca/checkout-agent/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/altwallet_agent"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --cov=src/altwallet_agent --cov-report=term-missing --cov-report=html"
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
src = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # exception chaining - too strict for our use case
    "UP038", # isinstance with tuple - requires Python 3.10+
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "structlog.*",
    "rich.*",
    "typer.*",
]
ignore_missing_imports = true
