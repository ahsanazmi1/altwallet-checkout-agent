name: Orca CI

on:
  push:
    branches: [ main, orca-phase-align, develop ]
  pull_request:
    branches: [ main, orca-phase-align, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Lint with Black
      run: |
        black --check --diff src/ tests/ examples/
    
    - name: Lint with Ruff
      run: |
        ruff check src/ tests/ examples/
    
    - name: Type check with MyPy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src/orca_checkout --cov-report=xml --cov-fail-under=85

    - name: Run smoke tests
      run: |
        python tests/smoke_tests.py
      env:
        LOG_SILENT: "1"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  regression-tests:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Run decision contract validation tests
      run: |
        pytest tests/test_decisioning.py::TestDecisionContract -v --tb=short
    
    - name: Run webhook delivery functionality tests
      run: |
        pytest tests/test_webhooks.py -v --tb=short
    
    - name: Run analytics event schema validation tests
      run: |
        pytest tests/test_analytics.py -v --tb=short
    
    - name: Run integration tests
      run: |
        pytest tests/ -k "integration" -v --tb=short
    
    - name: Generate OpenAPI schema
      run: |
        python -c "
        import uvicorn
        import asyncio
        import time
        import os
        from src.orca_checkout.api import app
        
        # Start server briefly to generate OpenAPI schema
        config = uvicorn.Config(app, host='127.0.0.1', port=8000, log_level='error')
        server = uvicorn.Server(config)
        
        async def generate_schema():
            await server.serve()
        
        # Run server for a short time to generate schema
        try:
            asyncio.run(asyncio.wait_for(generate_schema(), timeout=5.0))
        except asyncio.TimeoutError:
            pass  # Expected - we just want to generate the schema file
        
        print('OpenAPI schema generated')
        "
    
    - name: Validate OpenAPI schema
      run: |
        python -c "
        import json
        import os
        schema_path = 'openapi/openapi.json'
        if not os.path.exists(schema_path):
            print(f'OpenAPI schema file not found at {schema_path}')
            print('Available files in openapi/ directory:')
            if os.path.exists('openapi/'):
                for f in os.listdir('openapi/'):
                    print(f'  {f}')
            exit(1)
        
        with open(schema_path, 'r') as f:
            schema = json.load(f)
        
        print(f'OpenAPI schema version: {schema[\"info\"][\"version\"]}')
        print(f'Available paths: {list(schema[\"paths\"].keys())}')
        
        assert schema['info']['version'] == '1.0.0'
        assert '/decision' in schema['paths']
        assert '/v1/decision' in schema['paths']
        # Note: /webhooks and /analytics/events endpoints may not be implemented yet
        print('OpenAPI schema validation passed')
        "
    
    - name: Validate analytics schema
      run: |
        python -c "
        import json
        with open('analytics/schema.json', 'r') as f:
            schema = json.load(f)
        assert schema['version'] == '0.3.0'
        assert 'analytics_events' in schema['properties']
        print('Analytics schema validation passed')
        "
    
    - name: Run demo scripts
      run: |
        cd examples
        python decisioning_demo.py
        python webhook_demo.py
        python analytics_demo.py
