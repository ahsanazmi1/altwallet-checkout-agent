name: CI

on:
  push:
    branches: [ main, phase1-core-engine, phase2-intelligence, develop ]
  pull_request:
    branches: [ main, phase1-core-engine, phase2-intelligence, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11.9", "3.12.9"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with Black
      run: |
        black --check --diff src/ tests/ examples/
    
    - name: Lint with Ruff
      run: |
        ruff check src/ tests/ examples/
    
    - name: Type check with MyPy
      run: |
        mypy src/ --ignore-missing-imports
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src/altwallet_agent --cov-report=xml

    - name: Run smoke tests
      run: |
        python tests/smoke_tests.py
      env:
        LOG_SILENT: "1"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  regression-tests:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run decision contract validation tests
      run: |
        pytest tests/test_decisioning.py::TestDecisionContract -v --tb=short
    
    - name: Run webhook delivery functionality tests
      run: |
        pytest tests/test_webhooks.py -v --tb=short
    
    - name: Run analytics event schema validation tests
      run: |
        pytest tests/test_analytics.py -v --tb=short
    
    - name: Run integration tests
      run: |
        pytest tests/ -k "integration" -v --tb=short
    
    - name: Validate OpenAPI schema
      run: |
        python -c "
        import json
        with open('openapi/openapi-v0.3.0.json', 'r') as f:
            schema = json.load(f)
        assert schema['info']['version'] == '0.3.0'
        assert '/decision' in schema['paths']
        assert '/webhooks' in schema['paths']
        assert '/analytics/events' in schema['paths']
        print('OpenAPI schema validation passed')
        "
    
    - name: Validate analytics schema
      run: |
        python -c "
        import json
        with open('analytics/schema.json', 'r') as f:
            schema = json.load(f)
        assert schema['version'] == '0.3.0'
        assert 'analytics_events' in schema['properties']
        print('Analytics schema validation passed')
        "
    
    - name: Run demo scripts
      run: |
        cd examples
        python decisioning_demo.py
        python webhook_demo.py
        python analytics_demo.py
