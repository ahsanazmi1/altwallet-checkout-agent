name: Phase 4 Guardrails

on:
  push:
    branches: [ phase4-platformization ]
  pull_request:
    branches: [ phase4-platformization ]

jobs:
  phase4-guardrails:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11.9", "3.12.9"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .

    # Guardrail 1: Backward Compatibility
    - name: Backward Compatibility Check
      run: |
        echo "Checking backward compatibility..."
        
        # Run all existing tests to ensure nothing is broken
        python -m pytest tests/ -v --tb=short
        
        # Run smoke tests
        python tests/smoke_tests.py
        
        # Test CLI commands still work
        altwallet_agent --help
        altwallet_agent --version
        
        echo "Backward compatibility verified"
      env:
        LOG_SILENT: "1"

    # Guardrail 2: Testing Requirements
    - name: Testing Requirements Check
      run: |
        echo "Checking testing requirements..."
        
        # Check for Phase 4 test files in tests/ directory
        echo "Checking Phase 4 test files..."
        if [ -f "tests/test_deployment_profiles.py" ] && [ -f "tests/test_phase4_deployment.py" ]; then
          echo "[PASS] Found deployment test files"
        else
          echo "[FAIL] Missing deployment test files"
          exit 1
        fi
        
        if [ -f "tests/test_phase4_sdk.py" ]; then
          echo "[PASS] Found SDK test files"
        else
          echo "[FAIL] Missing SDK test files"
          exit 1
        fi
        
        # Run golden tests to ensure consistency
        python -m pytest tests/test_golden.py -v --tb=short
        
        echo "[PASS] Testing requirements verified"
      env:
        UPDATE_GOLDEN: ""

    # Guardrail 3: Structured Logging Compliance
    - name: Structured Logging Check
      run: |
        echo "[LOG] Checking structured logging compliance..."
        
        # Check for proper logging imports and usage
        python -c "
        import ast
        import os
        
        def check_logging_compliance(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
                tree = ast.parse(content)
                
                # Check for structlog usage
                if 'structlog' in content:
                    print(f'[PASS] {file_path}: Uses structlog')
                elif 'logging' in content and 'logger' in content:
                    print(f'??  {file_path}: Uses standard logging (consider structlog)')
                else:
                    print(f'[INFO]  {file_path}: No logging detected')
        
        # Check Phase 4 related files
        phase4_files = []
        for root, dirs, files in os.walk('.'):
            if any(phase4_dir in root for phase4_dir in ['deployment', 'sdk', 'platformization']):
                for file in files:
                    if file.endswith('.py'):
                        phase4_files.append(os.path.join(root, file))
        
        if phase4_files:
            for file in phase4_files:
                check_logging_compliance(file)
        else:
            print('[INFO]  No Phase 4 Python files found yet')
        "
        
        # Test LOG_SILENT functionality
        python -c "
        import os
        os.environ['LOG_SILENT'] = '1'
        from src.altwallet_agent.core import CheckoutAgent
        agent = CheckoutAgent()
        print('[PASS] LOG_SILENT=1 support verified')
        "
        
        echo "[PASS] Structured logging compliance verified"

    # Guardrail 4: Modular Architecture Check
    - name: Modular Architecture Check
      run: |
        echo "??  Checking modular architecture compliance..."
        
        # Check for provider framework patterns
        python -c "
        import os
        import re
        
        def check_provider_patterns(file_path):
            with open(file_path, 'r') as f:
                content = f.read()
                
                # Look for provider-like patterns
                if re.search(r'class.*Provider.*:', content):
                    print(f'[PASS] {file_path}: Contains Provider pattern')
                elif re.search(r'from.*provider', content):
                    print(f'[PASS] {file_path}: Imports provider framework')
                elif re.search(r'ABC|abstractmethod', content):
                    print(f'[PASS] {file_path}: Uses abstract base classes')
                else:
                    print(f'[INFO]  {file_path}: No provider patterns detected')
        
        # Check Phase 4 files for provider patterns
        phase4_files = []
        for root, dirs, files in os.walk('.'):
            if any(phase4_dir in root for phase4_dir in ['deployment', 'sdk', 'platformization']):
                for file in files:
                    if file.endswith('.py'):
                        phase4_files.append(os.path.join(root, file))
        
        if phase4_files:
            for file in phase4_files:
                check_provider_patterns(file)
        else:
            print('[INFO]  No Phase 4 Python files found yet')
        "
        
        echo "[PASS] Modular architecture compliance verified"

    # Guardrail 5: CI/CD Gates - Deployment Profiles
    - name: Deployment Profiles Check
      run: |
        echo "[DEPLOY] Checking deployment profiles..."
        
        # Check for required deployment profile files
        required_files=(
          "deployment/sidecar/kubernetes.yaml"
          "deployment/sidecar/docker-compose.yml"
          "deployment/inline/embedded.yaml"
          "deployment/helm/Chart.yaml"
          "deployment/terraform/main.tf"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "[PASS] Found: $file"
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "[FAIL] Missing deployment profile files:"
          printf '%s\n' "${missing_files[@]}"
          echo "Please create the missing deployment profiles before merging."
          exit 1
        fi
        
        echo "[PASS] All deployment profiles present"

    # Guardrail 5: CI/CD Gates - SDK Examples
    - name: SDK Examples Check
      run: |
        echo "[SDK] Checking SDK examples..."
        
        # Check for required SDK example files
        required_files=(
          "sdk/python/examples/basic_usage.py"
          "sdk/python/examples/advanced_usage.py"
          "sdk/nodejs/examples/basic_usage.js"
          "sdk/nodejs/examples/advanced_usage.js"
          "sdk/python/README.md"
          "sdk/nodejs/README.md"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "[PASS] Found: $file"
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "[FAIL] Missing SDK example files:"
          printf '%s\n' "${missing_files[@]}"
          echo "Please create the missing SDK examples before merging."
          exit 1
        fi
        
        echo "[PASS] All SDK examples present"

    # Code Quality Checks
    - name: Code Quality Check
      run: |
        echo "[CHECK] Running code quality checks..."
        
        # Lint with Black
        black --check --diff src/ tests/ examples/ deployment/ sdk/ || true
        
        # Lint with Ruff
        ruff check src/ tests/ examples/ deployment/ sdk/ || true
        
        # Type check with MyPy
        mypy src/ --ignore-missing-imports || true
        
        echo "[PASS] Code quality checks completed"

    # Coverage Check
    - name: Coverage Check
      run: |
        echo "[COVERAGE] Checking test coverage..."
        
        # Run tests with coverage
        python -m pytest tests/ -v --cov=src/altwallet_agent --cov-report=xml --cov-report=term
        
        # Check coverage threshold (65% minimum for Phase 4)
        python -c "
        import xml.etree.ElementTree as ET
        
        tree = ET.parse('coverage.xml')
        root = tree.getroot()
        
        # Get line coverage percentage
        line_rate = float(root.get('line-rate', 0))
        coverage_percent = line_rate * 100
        
        print(f'Coverage: {coverage_percent:.1f}%')
        
        if coverage_percent < 65:
            print(f'[FAIL] Coverage {coverage_percent:.1f}% is below 65% threshold')
            exit(1)
        else:
            print(f'[PASS] Coverage {coverage_percent:.1f}% meets 65% threshold')
        "
        
        echo "[PASS] Coverage check completed"

    # Final Summary
    - name: Guardrails Summary
      run: |
        echo "[SUCCESS] Phase 4 Guardrails Summary"
        echo "================================"
        echo "[PASS] Backward Compatibility: Verified"
        echo "[PASS] Testing Requirements: Verified"
        echo "[PASS] Structured Logging: Verified"
        echo "[PASS] Modular Architecture: Verified"
        echo "[PASS] Deployment Profiles: Verified"
        echo "[PASS] SDK Examples: Verified"
        echo "[PASS] Code Quality: Verified"
        echo "[PASS] Test Coverage: Verified"
        echo ""
        echo "[DEPLOY] All Phase 4 guardrails passed! Ready for merge."
